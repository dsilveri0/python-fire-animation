#!/usr/bin/env python3

from colr import color
from random import randint
import colourpalette
from time import sleep

# Global variables (Matrix, Rows/Cols and Palette)
matrix = 0
rows, cols = (15, 45) # This 45 controls ammount of columns
palette = colourpalette.ColourPalette()

# Creates the 2B Matrix and adds a random number to each position of it.
def calcMatrixVal():
    matrix = [[0 for i in range(cols)] for j in range(rows)]

    for i in range(45): # Controls ammount of columns
        matrix[14][i] = 36

    for i in range(1, rows):
        for j in range(cols):
            matrix[i][j] = matrix[i-1][j] + randint(0, 5)
            if matrix[i][j] > 36:
                matrix[i][j] = 36
    return matrix

# This updates the numbers on the matrix so every time we render the fire it has a diferent pattern
matrix = calcMatrixVal()

# Gives colour based on the index value
def giveColours(letteri, letterj):
    if matrix[letteri][letterj] != 36:
        print(color(" ", fore=(0,0,0), back=palette.get_colour(matrix[letteri][letterj])), end="")
    elif matrix[letteri][letterj] == 36:
        print(color(" ", fore=(0,0,0), back=palette.get_colour(36)), end="")

# Renders the colours
def printColours():
    for i in range(15):
        for j in range(45): # Controls ammount of columns
            giveColours(i, j)
        print("")
    print("")

# Uses ANSI escape sequences to move the cursor to it's initial position
def move_cursor(n):
    print("\x1b[{}A".format(n)) # n + 1

# Uses ANSI escape sequences to clear the screen
def clear():
    print("\x1b[2J")

# Function that clears the terminal and moves the cursor to the right position for next print
def fireAnimation():
    clear()
    printColours()
    move_cursor(17)
    sleep(0.08)
    printColours()
    sleep(0.08)
    move_cursor(18)

# Loops the function that creates the fire animation and also the function that updates the "fire"
for m in range(1000):
    matrix = calcMatrixVal()
    fireAnimation()
