#!/usr/bin/env python3

from colr import color
from random import randint
import colourpalette
from time import sleep

# Global variables (Matrix, Rows/Cols and Palette)
matrix = 0
rows, cols = (15, 15)
palette = colourpalette.ColourPalette()

# Creates the 2B Matrix and adds a random number to each position of it.
def calcMatrixVal():
    matrix = [[0 for i in range(cols)] for j in range(rows)]

    for i in range(15):
        matrix[14][i] = 36

    for i in range(1, rows):
        for j in range(cols):
            matrix[i][j] = matrix[i-1][j] + randint(0, 5)
            if matrix[i][j] > 36:
                matrix[i][j] = 36
    return matrix
#matrix = calcMatrixVal()

# Gives colour based on the index value
def giveColours(letteri, letterj):
    if matrix[letteri][letterj] != 36:
        print(color("  ", fore=(0,0,0), back=palette.get_colour(matrix[letteri][letterj])), end="")
    elif matrix[letteri][letterj] == 36:
        print(color("  ", fore=(0,0,0), back=palette.get_colour(36)), end="")

# Renders the colours
def printColours():
    for i in range(15):
        for j in range(15):
            giveColours(i, j)
        print("")
    print("")
#printColours()

# Calls the render and updates the matrix in a loop
#for m in range(3):
matrix = calcMatrixVal()
#    printColours()

def move_cursor(n):
    print("\x1b[{}A".format(n)) # n + 1

def clear():
    print("\x1b[2J")

#for m in range(5):
#    clear()
#    printColours()
#    move_cursor(17)
#    sleep(0.2)
#    matrix = calcMatrixVal()
#    printColours()
#    sleep(0.1)
#    clear()
#    move_cursor(18)
#    matrix = calcMatrixVal()
#    printColours()
#    sleep(0.1)
#    move_cursor(19)
#    matrix = calcMatrixVal()

def fireAnimation():
    clear()
    printColours()
    move_cursor(17)
    sleep(0.1)
    printColours()
    sleep(0.1)
    move_cursor(18)

for m in range(100):
    matrix = calcMatrixVal()
    fireAnimation()
